#!/usr/bin/env python

import argparse
import itertools
import matplotlib
import pandas as pd
import sys

matplotlib.use("Agg")
import matplotlib.pyplot as plt


ELAPSED_TIME_COL = "ElapsedTime"
ELAPSED_TIME_TEXT = "Elapsed Time (s)"
COMPLETED_COL = "Completed"
COMPLETED_TEXT = "Completed"
DELTA_COL = "Delta"
DELTA_TEXT = "Delta"
OBJECTS_PER_SECOND_COL = "ObjectsPerSecond"
OBJECTS_PER_SECOND_TEXT = "Objects/Second"
PLOT_COLORS = ["r", "g", "b", "c", "m", "y", "k"]
PLOT_COLS = 1
PLOT_ROWS = 2
FIG_SIZE = (18, 12)


def plot(plot_position, x_axis_data, x_axis_label, warning_msg=None):
    color_iterator = itertools.cycle(PLOT_COLORS)

    ax = fig.add_subplot(PLOT_ROWS, PLOT_COLS, plot_position)
    for worker in workers:
        ax.plot(
            x_axis_data,
            data_frame[worker][OBJECTS_PER_SECOND_COL],
            color=color_iterator.next(), label=worker)
    ax.set_xlabel(x_axis_label, color="k")
    ax.set_ylabel(OBJECTS_PER_SECOND_TEXT, color="k")
    ax.grid(color="tab:gray", linestyle="dashdot", linewidth=.4)
    plt.legend()
    if warning_msg:
        plt.title(warning_msg, bbox=dict(facecolor='red', alpha=0.5))


def parse_args():
    parser = argparse.ArgumentParser(description="Plot results from "
                                                 "pfs-swift-load")
    parser.add_argument("-i", "--input", type=str, required=True,
                        help="Input CSV file")
    parser.add_argument("-o", "--output", type=str, required=True,
                        help="Output PNG file")
    parser.add_argument("-w", "--warning", type=str, required=False,
                        default=None, help="Warning message to print on the "
                                           "PNG file")
    args = parser.parse_args()
    options = {
        "input": args.input,
        "output": args.output,
        "warning": args.warning,
    }
    return options


if __name__ == "__main__":
    options = parse_args()

    data_frame = pd.read_csv(options["input"], header=[0, 1])
    workers = list(data_frame.keys().levels[0])
    # We only have len(PLOT_COLORS) colors to use, and we don't want 2 workers
    # to be plotted with the same color...
    if len(workers) > len(PLOT_COLORS):
        print("Too many workers: {}, max: {}".format(len(workers),
                                                     len(PLOT_COLORS)))
        sys.exit(1)

    # Check how long are the intervals between samples
    interval = data_frame[workers[0]].ElapsedTime[0]
    # We want an extra column for objects/second. Warning! It doesn't take into
    # account the fact that several threads could have been working in
    # parallel. Maybe we could add an option?
    for worker in workers:
        data_frame[worker, OBJECTS_PER_SECOND_COL] = \
            data_frame[worker][DELTA_COL] / interval
    data_frame = data_frame.sort_index(axis=1)

    # Draw the chart(s)
    fig = plt.figure(figsize=FIG_SIZE)
    plot(1, data_frame[worker][ELAPSED_TIME_COL], ELAPSED_TIME_TEXT,
         options["warning"])
    plot(2, data_frame[worker][COMPLETED_COL], COMPLETED_TEXT)
    plt.savefig(options["output"])
