#!/usr/bin/env python

import json
import os.path
import re
import sys
import time
import argparse
import requests
import subprocess

# TODO:
# * humanize stats if humanize is installed
# * better print formatting; use tables if appropriate module is installed

CONFIG_FILE_PATHS = [
    "/opt/ss/etc/proxyfs.conf",
    "/etc/proxyfsd/saioproxyfsd0.conf"
]

PFSCONFJSON_PATHS = [
    "/opt/ss/bin/pfsconfjson",
    "/home/swift/code/ProxyFS/bin/pfsconfjson"
]

DEFAULT_CONFIG = {
    "hostname": "localhost",
    "port": 15346
}


def find_config_file_path():
    for file_path in CONFIG_FILE_PATHS:
        if os.path.isfile(file_path):
            return file_path
    return None


def get_values_to_return(provided_hostname, provided_port, calculated_hostname,
                         calculated_port):
    if provided_hostname is not None:
        return_hostname = provided_hostname
    else:
        return_hostname = calculated_hostname

    if provided_port is not None:
        return_port = provided_port
    else:
        return_port = calculated_port

    return return_hostname, return_port


def get_pfsconfjson_path():
    try:
        path = subprocess.check_output("which pfsconfjsons",
                                       stderr=subprocess.PIPE, shell=True)
        return path.strip()
    except:
        pass

    for file_path in PFSCONFJSON_PATHS:
        if os.path.isfile(file_path):
            return file_path

    try:
        paths = subprocess.check_output("find / -iname 'pfsconfjson'",
                                        shell=True,
                                        stderr=subprocess.PIPE).splitlines()
    except subprocess.CalledProcessError as ex:
        paths = [line for line in ex.output.splitlines() if
                 "Permission denied" not in line]
    finally:
        if len(paths) > 0:
            return paths[0].strip()

    return None


def get_config_hostname_and_port(config_file_path, pfsconfjson_path):
    pfsconfjson_call = "{} {}".format(pfsconfjson_path, config_file_path)
    config_json_str = subprocess.check_output(pfsconfjson_call, shell=True)
    config = json.loads(config_json_str)
    whoami = config["Cluster"]["WhoAmI"][0]
    hostname = config[whoami]["PrivateIPAddr"][0]
    port = int(config["HTTPServer"]["TCPPort"][0])
    return hostname, port


def get_hostname_and_port(provided_hostname, provided_port):
    if provided_hostname is not None and provided_port is not None:
        return provided_hostname, provided_port

    config_file_path = find_config_file_path()
    if config_file_path is None:
        return get_values_to_return(provided_hostname, provided_port,
                                    DEFAULT_CONFIG["hostname"],
                                    DEFAULT_CONFIG["port"])

    pfsconfjson_path = get_pfsconfjson_path()
    if pfsconfjson_path is None:
        return get_values_to_return(provided_hostname, provided_port,
                                    DEFAULT_CONFIG["hostname"],
                                    DEFAULT_CONFIG["port"])

    try:
        config_hostname, config_port = get_config_hostname_and_port(
            config_file_path, pfsconfjson_path)
        return get_values_to_return(provided_hostname, provided_port,
                                    config_hostname, config_port)
    except:
        return get_values_to_return(provided_hostname, provided_port,
                                    DEFAULT_CONFIG["hostname"],
                                    DEFAULT_CONFIG["port"])


def print_stats(s, exclude=[], show_all=False, diff=True):
    exclude_re = None
    if exclude:
        exclude_re = '|'.join(exclude)

    for k in sorted(s.keys()):
        # Do not display the line if it is in an excluded category
        # or if we're in diff mode and it is unchanged.
        # Unless we specified -v; in that case, show everything.
        hide = re.match(exclude_re, k)
        hide = hide or (diff and not s[k])
        if show_all or not hide:
            print("{: <90} {: >20}".format(k, s[k]))


def stat_diff(s1, s2):
    diff = {}
    for k in s2:
        if k not in s1:
            continue
        diff[k] = s2[k] - s1[k]

    return diff


def parse_stats(text):
    stats = {}
    for l in text.split("\n"):
        if not l:
            continue

        # Are stats guaranteed to be positive integers?
        match = re.match("(\S+)\s+(\d+)\s*$", l)
        if match:
            stats[match.group(1)] = int(match.group(2))
        else:
            sys.stderr.write("WARNING: unparsed line: [%s]\n" % l)

    return stats


def get_stats_from_proxyfsd(hostname, port):
    r = requests.get("http://%s:%d/metrics" % (hostname, port))
    r.raise_for_status()
    stats = r.json()
    stats['timestamp'] = int(time.time())
    return stats


def read_stats_from_file(fn):
    with open(fn) as f:
        text = f.read()
        stats = parse_stats(text)
        return stats


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Show Proxyfs stats')
    parser.add_argument('--verbose', '-v', action='store_true',
                        help='verbose output')
    parser.add_argument('--hostname', '-H', type=str, default=None,
                        help='Hostname of proxyfs stat server (probably localhost)')
    parser.add_argument('--port', '-p', type=int, default=None,
                        help='Port used by proxyfs stat server')
    parser.add_argument('--file', '-f', type=str,
                        help='Read starting stats from a file')
    parser.add_argument('cmd', type=str, nargs=argparse.REMAINDER, help='command to run')

    args = parser.parse_args()

    excludes = ['go_runtime', 'logging_level']

    hostname, port = get_hostname_and_port(args.hostname, args.port)

    if args.cmd or args.file:
        start_stats = None
        if args.file:
            start_stats = read_stats_from_file(args.file)
        else:
            start_stats = get_stats_from_proxyfsd(hostname, port)

        if args.cmd:
            subprocess.call(args.cmd)

        end_stats = get_stats_from_proxyfsd(hostname, port)
        diff = stat_diff(start_stats, end_stats)

        if args.cmd:
            print("\n--")
        print_stats(diff, exclude=excludes, show_all=args.verbose)
    else:
        stats = get_stats_from_proxyfsd(hostname, port)
        print_stats(stats, diff=False, exclude=excludes, show_all=args.verbose)
