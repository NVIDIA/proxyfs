package main

import (
	"fmt"
	"os"
	"os/exec"
)

const bytesPerLine = 16

func usage() {
	fmt.Println("go run make_static_data.go -?")
	fmt.Println("   Prints this help text")
	fmt.Println("go run make_static_data.go <packageName> <dstFile.go>")
	fmt.Println("   <packageName>   is the name of the ultimate package for <dstFile.go>")
	fmt.Println("   <dstFile.go>    is the name of the generated .go source file")
}

var bs = []byte{}

func main() {
	var (
		gitDescribeCmd       *exec.Cmd
		gitDescribeOutput    []byte
		dstFile              *os.File
		dstFileName          string
		err                  error
		packageName          string
		proxyfsVersionString string
	)

	if (2 == len(os.Args)) && ("-?" == os.Args[1]) {
		usage()
		os.Exit(0)
	}

	if 3 != len(os.Args) {
		usage()
		os.Exit(1)
	}

	packageName = os.Args[1]
	dstFileName = os.Args[2]

	dstFile, err = os.Create(dstFileName)
	if nil != err {
		panic(err.Error())
	}

	_, err = dstFile.Write([]byte(fmt.Sprintf("// Code generated by \"go run make_static_data.go %v %v\" - DO NOT EDIT\n\n", packageName, dstFileName)))
	if nil != err {
		panic(err.Error())
	}
	_, err = dstFile.Write([]byte(fmt.Sprintf("package %v\n\n", packageName)))
	if nil != err {
		panic(err.Error())
	}

	proxyfsVersionString = os.Getenv("PROXYFS_VERSION")

	if "" == proxyfsVersionString {
		gitDescribeCmd = exec.Command("git", "describe")

		gitDescribeOutput, err = gitDescribeCmd.Output()
		if nil != err {
			panic(err.Error())
		}

		proxyfsVersionString = string(gitDescribeOutput[:len(gitDescribeOutput)-1])
	}

	_, err = dstFile.Write([]byte(fmt.Sprintf("const ProxyFSVersion = `%v`\n", proxyfsVersionString)))
	if nil != err {
		panic(err.Error())
	}

	err = dstFile.Close()
	if nil != err {
		panic(err.Error())
	}

	os.Exit(0)
}
