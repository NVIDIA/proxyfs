#!/bin/bash

# Copyright (c) 2015-2021, NVIDIA CORPORATION.
# SPDX-License-Identifier: Apache-2.0

function usage {
    echo "usage:"
    echo "  $0 -h"
    echo "      outputs this usage and conf file format"
    echo "  $0 --clean"
    echo "      cleans current directory of generated files"
    echo "  $0 <conf-file>"
    echo "      derives a PFSAgent-enabled Dockerfile"
    echo "      based on directives in <conf-file>"
}

trim()
{
    local trimmed="$1"
    while [[ $trimmed == ' '* ]]; do
       trimmed="${trimmed## }"
    done
    while [[ $trimmed == *' ' ]]; do
        trimmed="${trimmed%% }"
    done
    echo "$trimmed"
}

if [[ $# -eq 1 ]]
then
    if [[ "$1" = "-h" ]]
    then
        usage
        echo
        echo "<conf-file> is in .INI format"
        echo
        echo "Commented lines begin with '#'"
        echo
        echo "The first section, [Globals], should have the following Key:Value pairs:"
        echo
        echo "SourceImage:   <repository:tag>"
        echo "PFSAgentImage: <repository:tag>"
        echo
        echo "Other sections enumerate each PFSAgent instance to configure."
        echo "The name of each section should be unique, ane be neither"
        echo "\"Globals\" nor \"TEMPLATE\" and enclosed in '[' and ']'."
        echo
        echo "Each such section (and there must be at least one of them)"
        echo "should have the following Key:Value pairs:"
        echo
        echo "FUSEVolumeName:     <e.g. CommonVolume>"
        echo "FUSEMountPointPath: <e.g. AgentMountPoint>"
        echo "PlugInEnvValue:     <e.g. {\"AuthURL\":\"http://localhost:8080/auth/v1.0\"\\u002C"
        echo "                           \"AuthUser\":\"test:tester\"\\u002C"
        echo "                           \"AuthKey\":\"testing\"\\u002C"
        echo "                           \"Account\":\"AUTH_test\"}>"
        echo "HTTPServerTCPPort:  <e.g. 9090>"
        exit 0
    elif [[ "$1" = "--clean" ]]
    then
        rm -f pfsagentd pfsagentd-init pfsagentd-swift-auth-plugin pfsagent.conf_* Dockerfile
        exit 0
    else
        CONF_FILE=$1
    fi
else
    usage
    exit 1
fi

CURRENT_SECTION_NAME=""
SOURCE_IMAGE=""
PFS_AGENT_IMAGE=""

while IFS= read -r line
do
    if [[ ${#line} -ne 0 ]]
    then
        if [[ ${line:0:1} != "#" ]]
        then
            if [[ ${line:0:1} = "[" ]]
            then
                NEW_SECTION_NAME=${line:1:${#line}-2}
                if [[ ${#NEW_SECTION_NAME} -eq 0 ]]
                then
                    echo "Section name cannot be empty"
                    exit 1
                fi
                if [[ $NEW_SECTION_NAME = "Globals" ]]
                then
                    if [[ ${CURRENT_SECTION_NAME} != "" ]]
                    then
                        echo "Encountered 2nd [Globals] section"
                        exit 1
                    fi
                    CURRENT_SECTION_NAME="Globals"
                else
                    if [[ ${CURRENT_SECTION_NAME} = "" ]]
                    then
                        echo "First section must be [Globals]"
                        exit 1
                    elif [[ ${CURRENT_SECTION_NAME} = "Globals" ]]
                    then
                        if [[ $NEW_SECTION_NAME = "TEMPLATE" ]]
                        then
                            echo "Encountered illegal section [TEMPLATE]"
                            exit 1
                        fi
                        if [[ ${SOURCE_IMAGE} = "" ]]
                        then
                            echo "Missing SourceImage in [Globals] section"
                            exit 1
                        fi
                        if [[ ${PFS_AGENT_IMAGE} = "" ]]
                        then
                            echo "Missing PFSAgentImage in [Globals] section"
                            exit 1
                        fi
                        CONTAINER=`docker create -ti pfsagent-build:latest`
                        docker cp $CONTAINER:/opt/PFSAgent/GOPATH/bin/pfsagentd .
                        docker cp $CONTAINER:/opt/PFSAgent/GOPATH/bin/pfsagentd-init .
                        docker cp $CONTAINER:/opt/PFSAgent/GOPATH/bin/pfsagentd-swift-auth-plugin .
                        docker cp $CONTAINER:/opt/PFSAgent/GOPATH/src/github.com/NVIDIA/proxyfs/pfsagentd/pfsagent.conf pfsagent.conf_TEMPLATE
                        docker container rm $CONTAINER > /dev/null
                    else
                        if [[ $NEW_SECTION_NAME = "TEMPLATE" ]]
                        then
                            echo "Encountered illegal section [TEMPLATE]"
                            exit 1
                        fi
                   fi
                    CURRENT_SECTION_NAME=$NEW_SECTION_NAME
                    cp pfsagent.conf_TEMPLATE pfsagent.conf_$CURRENT_SECTION_NAME
                fi
            else
                if [[ ${CURRENT_SECTION_NAME} == "" ]]
                then
                    echo "Found Key:Value line before any section"
                    exit 1
                elif [[ ${CURRENT_SECTION_NAME} == "Globals" ]]
                then
                    if [[ $line == "SourceImage:"* ]]
                    then
                        SOURCE_IMAGE="$(trim "${line:12}")"
                    elif [[ $line == "PFSAgentImage:"* ]]
                    then
                        PFS_AGENT_IMAGE="$(trim "${line:14}")"
                   else
                        echo "Encountered unexpected Key:Value line in [Globals] section: $line"
                        exit 1
                    fi
                else
                    echo $line >> pfsagent.conf_$CURRENT_SECTION_NAME
                fi
            fi
        fi
    fi
done < $CONF_FILE

if [[ ${CURRENT_SECTION_NAME} = "" ]]
then
    echo "Must have properly populated [Globals] section"
    echo "and at least one other section"
    exit 1
fi

if [[ ${CURRENT_SECTION_NAME} = "Globals" ]]
then
    if [[ ${SOURCE_IMAGE} = "" ]]
    then
        echo "Missing SourceImage in [Globals] section"
        exit 1
    fi
    if [[ ${PFS_AGENT_IMAGE} = "" ]]
    then
        echo "Missing PFSAgentImage in [Globals] section"
        exit 1
    fi
    CONTAINER=`docker create -ti pfsagent-build:latest`
    docker cp $CONTAINER:/opt/PFSAgent/GOPATH/bin/pfsagentd .
    docker cp $CONTAINER:/opt/PFSAgent/GOPATH/bin/pfsagentd-init .
    docker cp $CONTAINER:/opt/PFSAgent/GOPATH/bin/pfsagentd-swift-auth-plugin .
    docker cp $CONTAINER:/opt/PFSAgent/GOPATH/src/github.com/NVIDIA/proxyfs/pfsagentd/pfsagent.conf pfsagent.conf_TEMPLATE
    docker container rm $CONTAINER > /dev/null
fi

ENTRYPOINT=`docker inspect --format '{{json .Config.Entrypoint}}' ${SOURCE_IMAGE}`
CMD=`docker inspect --format '{{json .Config.Cmd}}' ${SOURCE_IMAGE}`
WORKING_DIR=`docker inspect --format '{{json .Config.WorkingDir}}' ${SOURCE_IMAGE}`

echo "FROM ${SOURCE_IMAGE}"                                                                   >  Dockerfile
echo "RUN yum install -y fuse"                                                                >> Dockerfile
echo "WORKDIR /opt/PFSAgent"                                                                  >> Dockerfile
echo "COPY pfsagentd ."                                                                       >> Dockerfile
echo "COPY pfsagentd-init ."                                                                  >> Dockerfile
echo "COPY pfsagentd-swift-auth-plugin ."                                                     >> Dockerfile
echo "COPY pfsagent.conf_* /opt/PFSAgent/"                                                    >> Dockerfile
echo "ENV PATH /opt/PFSAgent:$PATH"                                                           >> Dockerfile
echo "ENV PFSAGENT_PARENT_ENTRYPOINT  '${ENTRYPOINT}'"                                        >> Dockerfile
echo "ENV PFSAGENT_PARENT_CMD         '${CMD}'"                                               >> Dockerfile
echo "ENV PFSAGENT_PARENT_WORKING_DIR  ${WORKING_DIR}"                                        >> Dockerfile
echo "ENTRYPOINT [\"pfsagentd-init\"]"                                                        >> Dockerfile
echo ""                                                                                       >> Dockerfile
echo "# To run a container for this image:"                                                   >> Dockerfile
echo "#"                                                                                      >> Dockerfile
echo "#   docker run -it --rm --device /dev/fuse --cap-add SYS_ADMIN -p 9090:9090 <IMAGE ID>" >> Dockerfile
