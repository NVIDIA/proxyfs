#!/bin/bash

# A simple script to start the services and mount the sample mount point
# The PATH, etc should already be setup by systemctl environment

function await_proxyfsd_shutdown {
    while true
    do
        pidof proxyfsd > /dev/null
        if [ $? -ne 0 ]
        then
            break
        fi
        echo "Waiting for ProxyFS to be stopped..."
        sleep 1
    done
}

function await_proxyfsd_startup {
    /usr/bin/systemctl -q is-active proxyfsd
    if [ $? -ne 0 ]
    then
        echo "ProxyFS failed to start. Exiting..."
        exit 1
    fi
    while true
    do
        curl http://127.0.0.1:15346/ 2>/dev/null >/dev/null
        if [ $? -eq 0 ]
        then
            break
        fi
        echo "Waiting for ProxyFS to be started..."
        sleep 1
    done
}

function await_swift_startup {
    while true
    do
        curl http://127.0.0.1:8090/info 2>/dev/null >/dev/null
        if [ $? -eq 0 ]
        then
            break
        fi
        echo "Waiting for Swift to be started..."
        sleep 1
    done
}

function format_volume_if_necessary {
    sudo $GOPATH/bin/mkproxyfs -I $1 $GOPATH/src/github.com/swiftstack/ProxyFS/saio/proxyfs.conf
    if [ $? -ne 0 ]
    then
        echo "Could not pre-format $1"
        exit 1
    fi
}

if [ $# -gt 0 ]; then
    MOUNT_TYPE="$1"
    MOUNT_TYPE=${MOUNT_TYPE,,}
    if [ "$MOUNT_TYPE" != "all" ] && [ "$MOUNT_TYPE" != "keepmounts" ] && [ "$MOUNT_TYPE" != "smb" ] && [ "$MOUNT_TYPE" != "smb1" ] && [ "$MOUNT_TYPE" != "smb2" ] && [ "$MOUNT_TYPE" != "smb3" ] && [ "$MOUNT_TYPE" != "nfs" ]; then
        if [ "$MOUNT_TYPE" != "-h" ] && [ "$MOUNT_TYPE" != "--help" ]; then
            echo "Invalid argument '$1'."
            echo
        fi
        echo "Usage: $0 [mount type]"
        echo "Mount type options:"
        echo "    all: NFS v3 and SMB v3.0 (default option)"
        echo "    keepmounts: don't umount/mount any mountpoints"
        echo "    nfs: NFS v3"
        echo "    smb: SMB v3.0"
        echo "    smb1: SMB v1.0"
        echo "    smb2: SMB v2.1"
        echo "    smb3: SMB v3.0"
        exit 1
    fi
else
    MOUNT_TYPE=all
fi

if [ "$MOUNT_TYPE" == "all" ]; then
    NFS_VERS=3
    SMB_VERS=3.0
elif [ "$MOUNT_TYPE" == "nfs" ]; then
    NFS_VERS=3
elif [ "$MOUNT_TYPE" == "smb1" ]; then
    SMB_VERS=1.0
elif [ "$MOUNT_TYPE" == "smb2" ]; then
    SMB_VERS=2.1
elif [ "$MOUNT_TYPE" == "smb" ] || [ "$MOUNT_TYPE" == "smb3" ]; then
    SMB_VERS=3.0
fi

MOUNT_POINT_NFS=127.0.0.1:/CommonMountPoint
SHARE_NFS=/mnt/nfs_proxyfs_mount/

MOUNT_POINT_SMB=//127.0.0.1/proxyfs
SHARE_SMB=/mnt/smb_proxyfs_mount

# Making sure $GOPATH contains something:
source ~/.bashrc
if [ -z "$GOPATH" ]; then
    GOPATH=/home/swift/code/ProxyFS
fi

UID_SMB=`id -u`
GID_SMB=`id -g`

sudo mount -a

if [ $MOUNT_TYPE != "keepmounts" ]; then
    mountpoint -q $SHARE_NFS
    if [ $? -eq 0 ]; then
        sudo umount $SHARE_NFS
    fi

    mountpoint -q $SHARE_SMB
    if [ $? -eq 0 ]; then
        sudo umount $SHARE_SMB
    fi
fi

if [ -f /usr/bin/systemctl ]; then
    # Centos
    MOUNT=/usr/bin/mount
    sudo /usr/bin/systemctl stop nfs-idmap
    sudo /usr/bin/systemctl stop nfs-lock
    sudo /usr/bin/systemctl stop nfs-server
    sudo /usr/bin/systemctl stop rpcbind
    sudo /usr/bin/systemctl stop smb
    sudo /usr/bin/systemctl stop nmb
    # sudo /usr/bin/systemctl stop winbind
    sudo /usr/bin/systemctl stop proxyfsd
    await_proxyfsd_shutdown
    sudo /usr/bin/swift-init main stop
    sudo /usr/bin/systemctl stop memcached

    sudo /usr/bin/systemctl start memcached
    sudo /usr/bin/swift-init main start
    await_swift_startup
    format_volume_if_necessary CommonVolume
    sudo /usr/bin/systemctl start proxyfsd
    await_proxyfsd_startup
    # sudo /usr/bin/systemctl start winbind
    sudo /usr/bin/systemctl start nmb
    sudo /usr/bin/systemctl start smb
    sudo /usr/bin/systemctl start rpcbind
    sudo /usr/bin/systemctl start nfs-server
    sudo /usr/bin/systemctl start nfs-lock
    sudo /usr/bin/systemctl start nfs-idmap
else
    # Ubuntu (not tested!)
    MOUNT=/bin/mount
    sudo /usr/sbin/service nfs-idmap stop
    sudo /usr/sbin/service nfs-lock stop
    sudo /usr/sbin/service nfs-server stop
    sudo /usr/sbin/service rpcbind stop
    sudo /usr/sbin/service smbd stop
    sudo /usr/sbin/service nmbd stop
    # sudo /usr/sbin/service winbindd stop
    sudo /usr/sbin/service proxyfsd stop
    await_proxyfsd_shutdown
    sudo /usr/bin/swift-init main stop
    sudo /usr/sbin/service memcached stop

    sudo /usr/sbin/service memcached start
    sudo /usr/bin/swift-init main start
    await_swift_startup
    format_volume_if_necessary CommonVolume
    sudo /usr/sbin/service proxyfsd start
    await_proxyfsd_startup
    # sudo /usr/sbin/service winbindd start
    sudo /usr/sbin/service nmbd start
    sudo /usr/sbin/service smbd start
    sudo /usr/sbin/service rpcbind start
    sudo /usr/sbin/service nfs-server start
    sudo /usr/sbin/service nfs-lock start
    sudo /usr/sbin/service nfs-idmap start
fi

echo "ProxyFS successfully started"

if [ $MOUNT_TYPE = "all" ] || [ $MOUNT_TYPE = "nfs" ]; then
    mountpoint -q $SHARE_NFS
    if [ $? -ne 0 ]; then
        for i in `seq 5`; do
            sleep 5
            sudo $MOUNT -t nfs -o vers=$NFS_VERS $MOUNT_POINT_NFS $SHARE_NFS && break
            echo "Mount of $SHARE_NFS failed.  Retrying..."
        done
    fi

    mountpoint -q $SHARE_NFS
    if [ $? -ne 0 ]; then
        echo "ERROR:  Could not mount $SHARE_NFS."
        exit 1
    else
        echo "$SHARE_NFS successfully mounted"
    fi
fi

if [ $MOUNT_TYPE = "all" ] || [ $MOUNT_TYPE = "smb" ] || [ $MOUNT_TYPE = "smb1" ] || [ $MOUNT_TYPE = "smb2" ] || [ $MOUNT_TYPE = "smb3" ]; then
    mountpoint -q $SHARE_SMB
    if [ $? -ne 0 ]; then
        for i in `seq 5`; do
            sleep 5
            sudo $MOUNT -t cifs -o user=<%= @swift_user %>,password=<%= @swift_user %>,domain=LOCALHOST,uid=$UID_SMB,gid=$GID_SMB,vers=$SMB_VERS,iocharset=utf8,actimeo=0 $MOUNT_POINT_SMB $SHARE_SMB && break
            echo "Mount of $SHARE_SMB failed.  Retrying..."
        done
    fi

    mountpoint -q $SHARE_SMB
    if [ $? -ne 0 ]; then
        echo "ERROR:  Could not mount $SHARE_SMB."
        exit 1
    else
        echo "$SHARE_SMB successfully mounted"
    fi
fi
