# Copyright (c) 2015-2021, NVIDIA CORPORATION.
# SPDX-License-Identifier: Apache-2.0


"""
Middleware to provide S3 compatibility functions.

In conjunction with the Swift3 middleware, this allows clients using the S3
API to access data in bimodal ProxyFS accounts.

Features:

  * To handle an S3 Complete Multipart Upload request, swift3 PUTs a SLO
    manifest. This middleware converts that manifest to a COALESCE request
    so that the resulting object works as expected for both HTTP and
    filesystem access.
"""

import json

from . import utils

from swift.common import swob
from swift.common.utils import get_logger


def convert_slo_to_coalesce(slo_manifest):
    return {"elements": [e["name"].lstrip("/") for e in slo_manifest]}


class S3Compat(object):
    def __init__(self, app, conf, logger=None):
        self.logger = logger or get_logger(conf, log_route='pfs_s3_compat')
        self.app = app

    @swob.wsgify
    def __call__(self, req):
        if (self._is_s3_slo_manifest_put(req) and
                req.environ.get(utils.ENV_IS_BIMODAL)):
            # This was generated by swift3 and mangled by slo, so there's no
            # worry about size here. Either it fits in memory and we didn't
            # crash before getting here, or it doesn't fit in memory and
            # this function is never reached.
            slo_manifest = json.loads(req.environ['wsgi.input'].read())
            coalesce_input = json.dumps(
                convert_slo_to_coalesce(slo_manifest)).encode('utf-8')
            req.environ['wsgi.input'] = swob.WsgiBytesIO(coalesce_input)
            req.headers['Content-Length'] = str(len(coalesce_input))
            req.method = 'COALESCE'
            req.params.pop('multipart-manifest', None)
        return self.app

    def _is_s3_slo_manifest_put(self, req):
        ver, acc, con, obj = utils.parse_path(req.path)
        return (
            obj and
            req.method == 'PUT' and
            req.params.get('multipart-manifest', '').lower() == 'put' and
            # This is a somewhat brittle way of detecting a Swift3 request,
            # but it's all we've got.
            req.environ.get('swift.source') == 'S3')
